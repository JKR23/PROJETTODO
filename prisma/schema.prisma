// Configuration de la source de données et du générateur de client Prisma
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Modèle pour l'Utilisateur unique (id = 1)
model User {
  id            Int       @id @default(autoincrement()) // L'utilisateur unique
  username      String    @default("Utilisateur1") // Utilisateur par défaut
  email         String    @unique @default("default@example.com") // Ajout d'une valeur par défaut
  password      String    @default("1234")
  tasks         Task[]    // Tâches attribuées à cet utilisateur unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  roleId        Int       @default(1) // Ajout d'une valeur par défaut pour `roleId`
  role          Role      @relation(fields: [roleId], references: [id]) // Relation avec le rôle
}


// Modèle pour un rôle (Role)
model Role {
  id     Int     @id @default(autoincrement()) // ID unique pour chaque rôle
  name   String  @unique // Nom du rôle (Admin, User, Manager, etc.)
  users  User[] // Liste des utilisateurs associés à ce rôle
}

// Modèle pour une tâche (Task)
model Task {
  id            Int        @id @default(autoincrement()) // ID unique pour chaque tâche
  title         String     // Titre de la tâche
  description   String?    // Description optionnelle de la tâche
  priorityId    Int       @default(1) // Clé étrangère vers le modèle Priority, valeur par défaut 1
  statusId      Int       @default(1) // Clé étrangère vers le modèle Status, valeur par défaut 1
  userId        Int       // L'utilisateur qui a créé la tâche (ID = 1)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Relation avec l'utilisateur, Cascade
  createdAt     DateTime  @default(now()) // Date de création de la tâche
  updatedAt     DateTime  @updatedAt // Date de la dernière modification
  history       History[] // Historique des modifications de cette tâche, Cascade supprimé ici
  deadline      DateTime? // Date limite de la tâche (optionnelle)

  // Relations avec les modèles Priority et Status
  priority      Priority  @relation(fields: [priorityId], references: [id], onDelete: Cascade) // Cascade delete
  status        Status    @relation(fields: [statusId], references: [id], onDelete: Cascade) // Cascade delete
}

// Modèle pour l'historique des modifications de tâches (History)
model History {
  id          Int       @id @default(autoincrement()) // ID de l'historique
  taskId      Int       // Tâche concernée par la modification
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade) // Relation avec la tâche, Cascade
  modifiedAt  DateTime  @default(now()) // Date de la modification
  modifiedBy  Int       // ID de l'utilisateur ayant modifié (ID = 1 pour ce projet)
  action      String?
}

// Modèle pour les priorités de tâches (Priority)
model Priority {
  id     Int      @id @default(autoincrement()) // ID unique pour chaque priorité
  name   String   @unique // Nom de la priorité (Faible, Moyenne, Élevée)
  tasks  Task[]   // Liste des tâches associées à cette priorité
}

// Modèle pour les statuts de tâches (Status)
model Status {
  id     Int      @id @default(autoincrement()) // ID unique pour chaque statut
  name   String   @unique // Nom du statut (TODO, IN_PROGRESS, etc.)
  tasks  Task[]   // Liste des tâches associées à ce statut
}
